# -*- coding: utf-8 -*-
"""resnet18.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Y1TPAoWZdPO5jnGG0adSeIqd0_Oam-l
"""

from google.colab import drive
drive.mount('/content/drive',force_remount=True)

import torch
import torch.nn as nn
import torchvision.models as models
import torchvision
from torchvision import datasets, transforms
from torch import nn, optim
from torch.utils.data import DataLoader
from sklearn.metrics import accuracy_score, classification_report
# Data Preprocessing
transformation = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

train_data = datasets.ImageFolder(root="/content/drive/MyDrive/plant dataset/train", transform=transformation)
test_data = datasets.ImageFolder(root="/content/drive/MyDrive/plant dataset/test", transform=transformation)

train_loader = DataLoader(train_data, batch_size=64, shuffle=True)
test_loader = DataLoader(test_data, batch_size=64, shuffle=True)

# Class names
class_names = train_data.classes
# Load ResNet18
model = models.resnet18(pretrained=True)

num_classes = len(class_names)
model.fc = nn.Linear(model.fc.in_features,num_classes )

# Move to GPU if available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = model.to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.0001)
# Training Loop
num_epochs = 5
for epoch in range(1, num_epochs + 1):
    total_loss = 0
    model.train()  # Set to training mode
    for imgs, labels in train_loader:
        imgs, labels = imgs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(imgs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        total_loss += loss.item()


    print(f"Epoch {epoch}/{num_epochs}, Loss: {total_loss/len(train_loader):.4f}")
#testing
model.eval()
all_preds = []
all_labels = []

with torch.no_grad():
    for images, labels in test_loader:
        images = images.to(device)
        outputs = model(images)
        _, preds = torch.max(outputs, 1)
        all_preds.extend(preds.cpu().numpy())
        all_labels.extend(labels.numpy())

print("Accuracy:", accuracy_score(all_labels, all_preds))
print(classification_report(all_labels, all_preds, target_names=class_names))

